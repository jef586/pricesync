import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanupInvalidInvoices() {
  try {
    console.log('üßπ Limpiando facturas con n√∫meros inv√°lidos...');
    
    // Buscar facturas con n√∫meros que contengan "NaN"
    const invalidInvoices = await prisma.invoice.findMany({
      where: {
        number: {
          contains: 'NaN'
        }
      }
    });
    
    console.log(`üìã Encontradas ${invalidInvoices.length} facturas con n√∫meros inv√°lidos:`);
    invalidInvoices.forEach(invoice => {
      console.log(`  - ID: ${invoice.id}, N√∫mero: ${invoice.number}, Tipo: ${invoice.type}`);
    });
    
    if (invalidInvoices.length > 0) {
      // Eliminar facturas inv√°lidas
      const deleteResult = await prisma.invoice.deleteMany({
        where: {
          number: {
            contains: 'NaN'
          }
        }
      });
      
      console.log(`‚úÖ Eliminadas ${deleteResult.count} facturas con n√∫meros inv√°lidos`);
    }
    
    // Mostrar facturas restantes
    console.log('\nüìÑ Facturas restantes:');
    const remainingInvoices = await prisma.invoice.findMany({
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    remainingInvoices.forEach(invoice => {
      console.log(`  - ID: ${invoice.id}, N√∫mero: ${invoice.number}, Tipo: ${invoice.type}, Estado: ${invoice.status}`);
    });
    
    console.log('\n‚ú® Limpieza completada');
    
  } catch (error) {
    console.error('‚ùå Error durante la limpieza:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanupInvalidInvoices();