// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE AUTHENTICATION & AUTHORIZATION SCHEMA
// ============================================================================

enum UserRole {
  admin
  manager
  user
  viewer
}

enum UserStatus {
  active
  inactive
  suspended
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String    @map("password_hash")
  name         String
  avatarUrl    String?   @map("avatar_url")
  role         UserRole  @default(user)
  status       UserStatus @default(active)
  
  // Relaciones
  companyId    String    @map("company_id")
  company      Company   @relation(fields: [companyId], references: [id])
  
  // Auditoria
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  lastLogin    DateTime? @map("last_login")
  
  // Configuración personal
  preferences  Json      @default("{}")
  timezone     String    @default("America/Argentina/Buenos_Aires")
  
  // Relaciones
  sessions     UserSession[]
  
  @@map("users")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // 'billing:create', 'inventory:read'
  description String?
  module      String   // 'core', 'auto-parts', 'retail'
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  rolePermissions RolePermission[]
  
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  role         UserRole
  permissionId String     @map("permission_id")
  permission   Permission @relation(fields: [permissionId], references: [id])
  
  createdAt    DateTime   @default(now()) @map("created_at")
  
  @@unique([role, permissionId])
  @@map("role_permissions")
}

model UserSession {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash   String   @map("token_hash")
  refreshHash String   @map("refresh_hash")
  expiresAt   DateTime @map("expires_at")
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("user_sessions")
}

// ============================================================================
// CORE COMPANIES SCHEMA
// ============================================================================

enum CompanyStatus {
  active
  inactive
  suspended
}

model Company {
  id          String        @id @default(cuid())
  name        String
  taxId       String        @unique @map("tax_id") // CUIT/RUT/NIT
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  country     String        @default("AR") // ISO 3166-1 alpha-2
  zipCode     String?       @map("zip_code")
  
  status      CompanyStatus @default(active)
  
  // Configuración fiscal
  fiscalConfig Json         @default("{}") @map("fiscal_config")
  
  // Auditoria
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  
  // Relaciones
  users       User[]
  customers   Customer[]
  products    Product[]
  invoices    Invoice[]
  categories  Category[]
  
  @@map("companies")
}

// ============================================================================
// CORE CUSTOMERS SCHEMA (CRM)
// ============================================================================

enum CustomerType {
  individual
  business
}

enum CustomerStatus {
  active
  inactive
  blocked
}

model Customer {
  id          String         @id @default(cuid())
  code        String         // Código interno del cliente
  name        String
  type        CustomerType   @default(individual)
  status      CustomerStatus @default(active)
  
  // Información fiscal
  taxId       String?        @map("tax_id") // CUIT/DNI/RUT/NIT
  taxCategory String?        @map("tax_category") // Responsable Inscripto, Monotributo, etc.
  
  // Contacto
  email       String?
  phone       String?
  mobile      String?
  website     String?
  
  // Dirección
  address     String?
  city        String?
  state       String?
  country     String         @default("AR")
  zipCode     String?        @map("zip_code")
  
  // Comercial
  creditLimit Decimal?       @map("credit_limit") @db.Decimal(10, 2)
  paymentTerms Int?          @map("payment_terms") // días
  discount    Decimal?       @default(0) @db.Decimal(5, 2) // porcentaje
  
  // Relaciones
  companyId   String         @map("company_id")
  company     Company        @relation(fields: [companyId], references: [id])
  
  // Auditoria
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  deletedAt   DateTime?      @map("deleted_at")
  
  // Relaciones
  invoices    Invoice[]
  
  @@unique([companyId, code])
  @@map("customers")
}

// ============================================================================
// CORE INVENTORY SCHEMA
// ============================================================================

enum ProductType {
  product
  service
}

enum ProductStatus {
  active
  inactive
  discontinued
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  parentId    String?   @map("parent_id")
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // Relaciones
  companyId   String    @map("company_id")
  company     Company   @relation(fields: [companyId], references: [id])
  
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relaciones
  products    Product[]
  
  @@map("categories")
}

model Product {
  id          String        @id @default(cuid())
  code        String        // SKU/Código interno
  name        String
  description String?
  type        ProductType   @default(product)
  status      ProductStatus @default(active)
  
  // Precios
  costPrice   Decimal?      @map("cost_price") @db.Decimal(10, 2)
  salePrice   Decimal       @map("sale_price") @db.Decimal(10, 2)
  
  // Inventario
  stock       Int           @default(0)
  minStock    Int?          @map("min_stock")
  maxStock    Int?          @map("max_stock")
  
  // Impuestos
  taxRate     Decimal       @default(21) @map("tax_rate") @db.Decimal(5, 2) // IVA %
  
  // Relaciones
  companyId   String        @map("company_id")
  company     Company       @relation(fields: [companyId], references: [id])
  categoryId  String?       @map("category_id")
  category    Category?     @relation(fields: [categoryId], references: [id])
  
  // Auditoria
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  
  // Relaciones
  invoiceItems InvoiceItem[]
  
  @@unique([companyId, code])
  @@map("products")
}

// ============================================================================
// CORE BILLING SCHEMA
// ============================================================================

enum InvoiceType {
  A  // Factura A
  B  // Factura B
  C  // Factura C
  E  // Factura E (Exportación)
  M  // Factura M (Monotributo)
}

enum InvoiceStatus {
  draft
  pending
  sent
  paid
  overdue
  cancelled
}

model Invoice {
  id            String        @id @default(cuid())
  number        String        // Número de factura
  type          InvoiceType   @default(B)
  status        InvoiceStatus @default(draft)
  
  // Fechas
  issueDate     DateTime      @map("issue_date")
  dueDate       DateTime?     @map("due_date")
  paidDate      DateTime?     @map("paid_date")
  
  // Importes
  subtotal      Decimal       @db.Decimal(10, 2)
  taxAmount     Decimal       @map("tax_amount") @db.Decimal(10, 2)
  total         Decimal       @db.Decimal(10, 2)
  
  // Observaciones
  notes         String?
  
  // Información fiscal
  fiscalData    Json?         @map("fiscal_data") // CAE, CAI, etc.
  
  // Relaciones
  companyId     String        @map("company_id")
  company       Company       @relation(fields: [companyId], references: [id])
  customerId    String        @map("customer_id")
  customer      Customer      @relation(fields: [customerId], references: [id])
  
  // Auditoria
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  
  // Relaciones
  items         InvoiceItem[]
  
  @@unique([companyId, number])
  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  quantity    Decimal @db.Decimal(10, 3)
  unitPrice   Decimal @map("unit_price") @db.Decimal(10, 2)
  discount    Decimal @default(0) @db.Decimal(5, 2) // porcentaje
  taxRate     Decimal @map("tax_rate") @db.Decimal(5, 2)
  
  // Calculados
  subtotal    Decimal @db.Decimal(10, 2)
  taxAmount   Decimal @map("tax_amount") @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)
  
  // Relaciones
  invoiceId   String  @map("invoice_id")
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  productId   String  @map("product_id")
  product     Product @relation(fields: [productId], references: [id])
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("invoice_items")
}