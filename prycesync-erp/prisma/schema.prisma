// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE AUTHENTICATION & AUTHORIZATION SCHEMA
// ============================================================================

enum UserRole {
  admin
  manager
  user
  viewer
}

enum UserStatus {
  active
  inactive
  suspended
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  passwordHash String     @map("password_hash")
  name         String
  avatarUrl    String?    @map("avatar_url")
  role         UserRole   @default(user)
  status       UserStatus @default(active)

  // Relaciones
  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  // Auditoria
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  lastLogin DateTime? @map("last_login")

  // Configuración personal
  preferences Json   @default("{}")
  timezone    String @default("America/Argentina/Buenos_Aires")

  // Relaciones
  sessions UserSession[]

  @@map("users")
}

model Permission {
  id          String  @id @default(cuid())
  name        String  @unique // 'billing:create', 'inventory:read'
  description String?
  module      String // 'core', 'auto-parts', 'retail'

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  role         UserRole
  permissionId String     @map("permission_id")
  permission   Permission @relation(fields: [permissionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([role, permissionId])
  @@map("role_permissions")
}

model UserSession {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash   String   @map("token_hash")
  refreshHash String   @map("refresh_hash")
  expiresAt   DateTime @map("expires_at")
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_sessions")
}

// ============================================================================
// CORE COMPANIES SCHEMA
// ============================================================================

enum CompanyStatus {
  active
  inactive
  suspended
}

model Company {
  id      String  @id @default(cuid())
  name    String
  taxId   String  @unique @map("tax_id") // CUIT/RUT/NIT
  email   String?
  phone   String?
  address String?
  city    String?
  state   String?
  country String  @default("AR") // ISO 3166-1 alpha-2
  zipCode String? @map("zip_code")

  status CompanyStatus @default(active)

  // Configuración fiscal
  fiscalConfig Json @default("{}") @map("fiscal_config")

  // Auditoria
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relaciones
  users       User[]
  customers   Customer[]
  products    Product[]
  invoices    Invoice[]
  categories  Category[]
  suppliers   Supplier[]
  // Ventas
  salesOrders SalesOrder[]

  @@map("companies")
}

// ============================================================================
// CORE CUSTOMERS SCHEMA (CRM)
// ============================================================================

enum CustomerType {
  individual
  business
}

enum CustomerStatus {
  active
  inactive
  blocked
}

model Customer {
  id     String         @id @default(cuid())
  code   String // Código interno del cliente
  name   String
  type   CustomerType   @default(individual)
  status CustomerStatus @default(active)

  // Información fiscal
  taxId       String? @map("tax_id") // CUIT/DNI/RUT/NIT
  taxCategory String? @map("tax_category") // Responsable Inscripto, Monotributo, etc.

  // Contacto
  email   String?
  phone   String?
  mobile  String?
  website String?

  // Dirección
  address String?
  city    String?
  state   String?
  country String  @default("AR")
  zipCode String? @map("zip_code")

  // Comercial
  creditLimit  Decimal? @map("credit_limit") @db.Decimal(10, 2)
  paymentTerms Int?     @map("payment_terms") // días
  discount     Decimal? @default(0) @db.Decimal(5, 2) // porcentaje

  // Relaciones
  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  // Auditoria
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relaciones
  invoices    Invoice[]
  // Ventas
  salesOrders SalesOrder[]

  @@unique([companyId, code])
  @@map("customers")
}

// ============================================================================
// CORE INVENTORY SCHEMA
// ============================================================================

enum ProductType {
  product
  service
}

enum ProductStatus {
  active
  inactive
  discontinued
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  parentId    String?    @map("parent_id")
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")

  // Relaciones
  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  products Product[]

  @@map("categories")
}

model Product {
  id          String        @id @default(cuid())
  code        String // SKU/Código interno
  name        String
  description String?
  type        ProductType   @default(product)
  status      ProductStatus @default(active)

  // Precios
  costPrice Decimal? @map("cost_price") @db.Decimal(10, 2)
  salePrice Decimal  @map("sale_price") @db.Decimal(10, 2)
  minPrice  Decimal? @map("min_price") @db.Decimal(10, 2)

  // Inventario
  stock    Int  @default(0)
  minStock Int? @map("min_stock")
  maxStock Int? @map("max_stock")

  // Impuestos
  taxRate Decimal @default(21) @map("tax_rate") @db.Decimal(5, 2) // IVA %

  // Relaciones
  companyId  String    @map("company_id")
  company    Company   @relation(fields: [companyId], references: [id])
  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id])

  // Auditoria
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relaciones
  invoiceItems     InvoiceItem[]
  supplierProducts SupplierProduct[]
  // Ventas
  salesOrderItems  SalesOrderItem[]

  @@unique([companyId, code])
  @@map("products")
}

// ============================================================================
// CORE BILLING SCHEMA
// ============================================================================

enum InvoiceType {
  A // Factura A
  B // Factura B
  C // Factura C
  E // Factura E (Exportación)
  M // Factura M (Monotributo)
}

enum InvoiceStatus {
  draft
  pending
  sent
  paid
  overdue
  cancelled
}
// Recargo final en documentos de facturación
enum SurchargeType {
  PERCENT
  ABS
}

model Invoice {
  id     String        @id @default(cuid())
  number String // Número de factura
  type   InvoiceType   @default(B)
  status InvoiceStatus @default(draft)

  // Fechas
  issueDate DateTime  @map("issue_date")
  dueDate   DateTime? @map("due_date")
  paidDate  DateTime? @map("paid_date")

  // Importes
  subtotal  Decimal @db.Decimal(10, 2)
  taxAmount Decimal @map("tax_amount") @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)
  // Recargo final (auditoría)
  surchargeType   SurchargeType? @map("surcharge_type")
  surchargeValue  Decimal        @default(0) @map("surcharge_value") @db.Decimal(12, 2)
  surchargeAmount Decimal        @default(0) @map("surcharge_amount") @db.Decimal(12, 2)

  // Observaciones
  notes String?

  // Información fiscal
  fiscalData Json? @map("fiscal_data") // CAE, CAI, etc.

  // Relaciones
  companyId  String   @map("company_id")
  company    Company  @relation(fields: [companyId], references: [id])
  customerId String   @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id])

  // Auditoria
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relaciones
  items InvoiceItem[]

  @@unique([companyId, number])
  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  description String? // Descripción personalizada del item
  quantity    Decimal @db.Decimal(10, 3)
  unitPrice   Decimal @map("unit_price") @db.Decimal(10, 2)
  discount    Decimal @default(0) @db.Decimal(5, 2) // porcentaje
  taxRate     Decimal @map("tax_rate") @db.Decimal(5, 2)

  // Calculados
  subtotal  Decimal @db.Decimal(10, 2)
  taxAmount Decimal @map("tax_amount") @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  // Relaciones
  invoiceId String   @map("invoice_id")
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  productId String?  @map("product_id") // Hacer opcional para permitir items sin producto
  product   Product? @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("invoice_items")
}

// ============================================================================
// SUPPLIERS SCHEMA
// ============================================================================

enum SupplierStatus {
  active
  inactive
  blocked
}

model Supplier {
  id           String  @id @default(cuid())
  code         String // Código interno del proveedor
  name         String
  businessName String? @map("business_name") // Razón social
  taxId        String? @map("tax_id") // CUIT/RUT/Tax ID

  // Información de contacto
  email   String?
  phone   String?
  website String?

  // Dirección
  address    String?
  city       String?
  state      String?
  postalCode String? @map("postal_code")
  country    String? @default("Argentina")

  // Estado y configuración
  status       SupplierStatus @default(active)
  paymentTerms Int?           @map("payment_terms") // Días de pago
  creditLimit  Decimal?       @map("credit_limit") @db.Decimal(12, 2)

  // Información adicional
  notes String?
  tags  String[] @default([])

  // Relaciones
  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  // Auditoria
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relaciones
  products SupplierProduct[]

  @@unique([companyId, code])
  @@unique([companyId, taxId])
  @@map("suppliers")
}

model SupplierProduct {
  id String @id @default(cuid())

  // Información del proveedor
  supplierCode String  @map("supplier_code") // Código del producto en el proveedor
  supplierName String  @map("supplier_name") // Nombre del producto según el proveedor
  description  String? // Descripción adicional

  // Precios y condiciones
  costPrice   Decimal  @map("cost_price") @db.Decimal(10, 2)
  listPrice   Decimal? @map("list_price") @db.Decimal(10, 2) // Precio de lista
  currency    String   @default("ARS")
  minQuantity Int?     @map("min_quantity") // Cantidad mínima de compra

  // Información técnica (para autopartes)
  brand String?
  model String?
  year  String?
  oem   String? // Número OEM

  // Estado y disponibilidad
  isActive    Boolean @default(true) @map("is_active")
  isAvailable Boolean @default(true) @map("is_available")
  leadTime    Int?    @map("lead_time") // Tiempo de entrega en días

  // Relaciones
  supplierId String   @map("supplier_id")
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  productId  String?  @map("product_id") // Vinculación opcional con producto interno
  product    Product? @relation(fields: [productId], references: [id])

  // Auditoria
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  lastImportDate DateTime? @map("last_import_date") // Fecha de última importación

  @@unique([supplierId, supplierCode])
  @@map("supplier_products")
}

// ============================================================================
// CORE SALES SCHEMA
// ============================================================================

enum SalesOrderStatus {
  open
  partially_paid
  parked
  paid
  draft
  completed
  cancelled
}

// Descuento por ítem en ventas
enum DiscountType {
  PERCENT
  ABS
}

model SalesOrder {
  id     String @id @default(cuid())
  number String @unique

  // Importes
  subtotal       Decimal @db.Decimal(10, 2)
  taxAmount      Decimal @map("tax_amount") @db.Decimal(10, 2)
  discountAmount Decimal @map("discount_amount") @db.Decimal(10, 2)
  total          Decimal @db.Decimal(10, 2)
  totalRounded   Decimal @map("total_rounded") @db.Decimal(10, 2)
  paidTotal      Decimal @default(0) @map("paid_total") @db.Decimal(10, 2)
  // Recargo final de la venta
  surchargeType   DiscountType? @map("surcharge_type")
  surchargeValue  Decimal       @default(0) @map("surcharge_value") @db.Decimal(12, 2)
  surchargeAmount Decimal       @default(0) @map("surcharge_amount") @db.Decimal(12, 2)

  status SalesOrderStatus @default(open)
  notes  String?

  // Relaciones
  companyId  String   @map("company_id")
  company    Company  @relation(fields: [companyId], references: [id])
  customerId String   @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id])

  // Auditoría
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Parking
  parkToken String?  @map("park_token")
  parkedAt  DateTime? @map("parked_at")

  // Relaciones
  items    SalesOrderItem[]
  payments SalesPayment[]

  @@unique([companyId, number])
  @@unique([parkToken], map: "uniq_sales_orders_park_token")
  @@index([parkedAt], map: "idx_sales_orders_parked_at")
  @@map("sales_orders")
}

model SalesOrderItem {
  id          String  @id @default(cuid())
  description String?
  quantity    Decimal @db.Decimal(10, 3)
  unitPrice   Decimal @map("unit_price") @db.Decimal(10, 2)
  discount    Decimal @default(0) @db.Decimal(5, 2)
  taxRate     Decimal @map("tax_rate") @db.Decimal(5, 2)

  // Descuentos por ítem (coexistentes con descuento final de la venta)
  discountType   DiscountType? @map("discount_type")
  discountValue  Decimal       @default(0) @map("discount_value") @db.Decimal(12, 2)
  discountTotal  Decimal       @default(0) @map("discount_total") @db.Decimal(12, 2)
  isDiscountable Boolean       @default(true) @map("is_discountable")

  // Calculados
  subtotal  Decimal @db.Decimal(10, 2)
  taxAmount Decimal @map("tax_amount") @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  // Relaciones
  salesOrderId String     @map("sales_order_id")
  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  productId    String?    @map("product_id")
  product      Product?   @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sales_order_items")
}

model SalesPayment {
  id            String   @id @default(cuid())
  method        String
  amount        Decimal  @db.Decimal(10, 2)
  currency      String   @default("ARS")
  reference     String?
  paidAt        DateTime @map("paid_at")
  methodDetails Json?    @map("method_details")

  // Relaciones
  salesOrderId String     @map("sales_order_id")
  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("sales_payments")
}
